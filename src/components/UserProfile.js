import React, { useState, useEffect } from 'react';
import imageCompression from 'browser-image-compression'; // –î–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
import './UserProfile.css';

const API_BASE = 'http://localhost:8000/api';

const UserProfile = ({ onLogout }) => {
  const [user, setUser] = useState(null);
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchUserProfile();
    fetchOrders();
  }, []);

  // –î–æ–±–∞–≤–∏–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
  useEffect(() => {
    const interval = setInterval(() => {
      fetchOrders();
    }, 30000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, []);

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    onLogout(); // –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã—Ö–æ–¥–∞
    window.location.href = '/';  // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  };

  const fetchUserProfile = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
        return;
      }

      const response = await fetch(`${API_BASE}/users/me`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!response.ok) {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.');
        return;
      }
     
      const data = await response.json();
      if (data.avatar) {
        console.log('ya huesos');
        fetchAvatar(data.avatar);
      }
  
      setUser(data);
      localStorage.setItem('user', JSON.stringify(data));
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
  };

  const fetchOrders = async () => {
    setLoading(true);
    setError(null);

    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
        setLoading(false);
        return;
      }

      const response = await fetch(`${API_BASE}/orders`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!response.ok) {
        setError(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        setLoading(false);
        return;
      }

      const data = await response.json();
      setOrders(data || []);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤.');
      setOrders([]);
    } finally {
      setLoading(false);
    }
  };

  const handleAvatarChange = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const options = {
      maxSizeMB: 0.3, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ (300 KB)
      maxWidthOrHeight: 512, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞
      useWebWorker: true,
    };

    try {
      // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const compressedFile = await imageCompression(file, options);

      console.log('–†–∞–∑–º–µ—Ä –¥–æ:', file.size, '–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ:', compressedFile.size);

      const formData = new FormData();
      formData.append('avatar', compressedFile, file.name);

      const token = localStorage.getItem('token');
      const response = await fetch(`${API_BASE}/users/avatar_upload/`, {
        method: 'POST',
        headers: { Authorization: `Bearer ${token}` },
        body: formData,
      });

      if (!response.ok) {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞.');
        return;
      }

      const data = await response.json();
      fetchAvatar(data.avatar);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
      console.error('–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è:', err);
    }
  };

  // üîÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞
  const fetchAvatar = async (avatarUrl) => {
    const apibase = API_BASE.replace('/api', '');
    console.log(apibase);
    try {
      const response = await fetch(`${apibase}/${avatarUrl}`, {
        method: 'GET',
      });
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞.');
      }

      const blob = await response.blob(); // –ü–æ–ª—É—á–∞–µ–º Blob
      const objectURL = URL.createObjectURL(blob); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ URL
      console.log("Avatar URL:", objectURL);
      console.log(process.env.REACT_APP_API_BASE);
      setUser((prevUser) => {
        const updatedUser = { ...prevUser, avatar: `${apibase}/${avatarUrl}` }; //–ì–ò–ì–ê –ö–û–°–¢–´–õ–¨
        localStorage.setItem('user', JSON.stringify(updatedUser));
        return updatedUser;
      });
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞.');
      console.error(err);
    }
  };

  const handleRemoveAvatar = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${API_BASE}/users/avatar_delete/`, {
        method: 'DELETE',
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!response.ok) {
        setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞.');
        return;
      }

      setUser((prevUser) => {
        const updatedUser = { ...prevUser, avatar: null };
        localStorage.setItem('user', JSON.stringify(updatedUser));
        return updatedUser;
      });
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞.');
    }
  };

  const handlePayment = async (orderId) => {
    try {
      const response = await fetch(`http://localhost:8000/api/orders/${orderId}/process_payment/`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ');
      }

      //const data = await response.json();
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
      setOrders(orders.map(order => 
        order.id === orderId 
          ? { ...order, payment_status: 'completed', status: 'processing' }
          : order
      ));

      alert('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      alert(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ');
    }
  };

  // –û–±–Ω–æ–≤–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞
  const getStatusText = (status) => {
    const statusMap = {
      'pending': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
      'processing': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
      'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    };
    return statusMap[status] || status;
  };

  return (
    <div className="user-profile">
      <div className="profile-header">
        <h2>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h2>
        <button onClick={handleLogout} className="logout-button">–í—ã–π—Ç–∏</button>
      </div>

      {error && <p className="error-message">{error}</p>}

      <div className="profile-info">
        <div className="avatar-section">
          <img
            src={user?.avatar ? user.avatar : "./profile-icon.png"}
            className="avatar"
            alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          />
          {!user?.avatar && <input type="file" accept="image/*" onChange={handleAvatarChange} />}
          {user?.avatar && <button onClick={handleRemoveAvatar} className="remove-avatar-button">–£–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä</button>}
        </div>
        <h3>{user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</h3>
        <p>Email: {user?.email || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
      </div>

      <div className="orders-section">
        <h3>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</h3>
        {loading ? (
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
        ) : orders.length > 0 ? (
          <div className="orders-list">
            {orders.map((order) => (
              <div key={order.id} className="order-card">
                <div className="order-header">
                  <span className="order-number">–ó–∞–∫–∞–∑ #{order.id}</span>
                  <div className="order-status">
                    <span>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</span>
                    <span className={`status status-${order.status}`}>
                      {getStatusText(order.status)}
                    </span>
                  </div>
                </div>
                <div className="order-details">
                  <div className="order-items">
                    {Array.isArray(order.items) ? (
                      order.items.map((item, index) => (
                        <div key={index} className="order-item">
                          {item.product_name && (
                            <>
                              <span>–¢–æ–≤–∞—Ä: {item.product_name}</span>
                              <span>x{item.quantity || '1'}</span>
                              <span>{item.price} ‚ÇΩ</span>
                            </>
                          )}
                          {item.service_name && (
                            <>
                              <span>–£—Å–ª—É–≥–∞: {item.service_name}</span>
                              <span className="service-price">–¶–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è</span>
                            </>
                          )}
                        </div>
                      ))
                    ) : (
                      <p>–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥ –≤ –∑–∞–∫–∞–∑–µ</p>
                    )}
                  </div>
                  <div className="order-info">
                    <div className="order-payment-status">
                      <span>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</span>
                      <span className={`payment-status status-${order.payment_status}`}>
                        {order.payment_status === 'pending' && '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'}
                        {order.payment_status === 'completed' && '–û–ø–ª–∞—á–µ–Ω'}
                        {order.payment_status === 'failed' && '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã'}
                      </span>
                    </div>
                    {order.payment_status === 'pending' && (
                      <button 
                        className="pay-button"
                        onClick={() => handlePayment(order.id)}
                      >
                        –û–ø–ª–∞—Ç–∏—Ç—å
                      </button>
                    )}
                    <div className="order-total">
                      <span>–ò—Ç–æ–≥–æ:</span>
                      <span>{order.total_amount} ‚ÇΩ</span>
                    </div>
                    <div className="order-date">
                      <span>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</span>
                      <span>{new Date(order.created_at).toLocaleDateString('ru-RU')}</span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className="no-orders">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
        )}
      </div>
    </div>
  );
};

export default UserProfile;
